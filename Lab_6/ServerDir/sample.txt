#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>



#define SERVER_PORT 5433
#define MAX_LINE 256

int main(int argc, char *argv[]) {
  struct hostent *hp;
  struct sockaddr_in sin;
  char *host;
  char buf[MAX_LINE];
  int s;
  int len;

  if (argc == 2) {
    host = argv[1];
  } else {
    fprintf(stderr, "usage: %s host\n", argv[0]);
    exit(1);
  }

  /* translate host name into peer's IP address */
  hp = gethostbyname(host);
  if (!hp) {
    fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
    exit(1);
  } else
    printf("Client's remote host: %s\n", argv[1]);
  /* build address data structure */
  bzero((char *)&sin, sizeof(sin));
  sin.sin_family = AF_INET;
  bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
  sin.sin_port = htons(SERVER_PORT);
  /* active open */
  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
    perror("simplex-talk: socket");
    exit(1);
  } else
    printf("Client created socket.\n");
  if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
    perror("simplex-talk: connect");
    close(s);
    exit(1);
  } else
    printf("Client connected.\n");

  /* main loop: get and send/receive lines of text */
  while (1) {
    printf("Client: ");
    fgets(buf, sizeof(buf), stdin);
    len = strlen(buf) + 1;
    send(s, buf, len, 0); // Send data to the server


    int fd = open("sample_out.txt", O_CREAT | O_WRONLY, 0644);    
    if ((len = recv(s, buf, sizeof(buf), 0)) > 0) {

        write(fd, buf, strlen(buf));
        close(s);
    
      // Receive data from the server
      // buf[len] = '\0'; // Null-terminate the received data
      // printf("Server: %s", buf);
    }
  }

  // Close the socket
  close(s);
}
